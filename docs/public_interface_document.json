{
  "package_name": "com.steve_os.tamagochi_d",
  "project_description": "The Flutter application is a Tamagotchi-style virtual pet game that allows users to create and care for their own pet. The main features include:\n\n- Pet creation: Users can create a new pet by providing a name.\n- Pet actions: Users can perform various actions on their pet, such as feeding, playing, cleaning, and healing, which affect the pet's stats and mood.\n- Pet shop: Users can access a pet shop to purchase items and actions for their pet using in-game coins.\n- Pet death: If a pet's stats deteriorate to critical levels, the pet will die, and the user will be presented with a dialog to start a new game.\n- Stat tracking: The application tracks and displays the pet's current stats, including hunger, happiness, health, energy, and hygiene levels.\n- Localization: The app supports multiple languages and can be localized for different regions.\n- Analytics: The app integrates with Firebase Analytics to track user interactions and screen views.",
  "architecture_overview": "The application follows the Stacked architecture, which separates the concerns of the UI, view models, and services. It uses Stacked for state management, routing, and dependency injection.\n\nThe main components include:\n\n- App: The main entry point that sets up the Stacked architecture and navigation.\n- AppView: The root widget that manages the application's overall structure, including navigation, localization, and event handling.\n- Various feature-specific views and view models (e.g., HomeView, StartupView, PetActionsView, PetStatusView, PetShopSheet).\n- Services (e.g., BottomSheetService, DialogService, NavigationService, PetService, AnalyticService) that handle specific functionalities and dependencies.\n- Localization and flavor management for development and production environments.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides an extension on the BuildContext class to make it easier to access the current AppLocalizations instance, which is responsible for managing the application's localization and internationalization.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current AppLocalizations instance for the given BuildContext.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized and reusable way to handle the internationalization (i18n) and localization (l10n) of the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns a list of localization delegates that provide the translation and formatting logic for the application's strings.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns a list of locales that the application supports for translation and formatting.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, setting up the necessary dependencies, and running the main app widget. It serves as the entry point for the application, ensuring a consistent initialization process across different app flavors.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "This is the main entry point function that initializes the application. It sets up the app's flavor, ensures the WidgetsFlutterBinding is initialized, and configures the app's orientation, locator, dialog UI, and bottom sheet UI. Finally, it runs the main app widget provided by the caller.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the application. It sets up the initial state and configuration for the app, ensuring it runs in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app and render the `AppView`.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the Flutter application. It sets up the application's entry point and configures the application flavor to be 'development'.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application that initializes the development build of the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enum called `Flavor` with two values: `production` and `development`. It represents the different flavors or environments that the application can run in.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the application using the AnalyticService. It is a NavigatorObserver that listens for navigation events and logs screen transitions to the analytics service.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + ScreenObserver()\n  + void didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + void didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n  - void _trackScreenView(Route<dynamic> route)\n}\n\nAnalyticService --* ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced in the navigation stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Logs the screen view to the AnalyticService based on the current route.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the main application view in a Flutter application. It serves as the ViewModel component in the Model-View-ViewModel (MVVM) architecture, which separates the presentation logic from the business logic.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This file defines the Firebase configuration options for the production environment of the application. It is responsible for providing the necessary Firebase-related settings and credentials to integrate the application with the Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "lib/config/firebase_options.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp and email communication from a Flutter application. It handles the platform-specific logic to open the appropriate communication channels for the user's device.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application or the WhatsApp web interface with a pre-filled message and recipient phone number.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The `DateUtil` class provides a set of utility functions for handling date and time data in the application, particularly when interacting with Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Extracts a `DateTime` object from a dynamic input value, which can be a `Timestamp` from Firestore, a `String` representation of a date and time, or a `DateTime` object directly.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines a custom exception class `APIException` that is used to handle and propagate exceptions that occur during API service interactions. It provides a standardized way to handle and communicate errors that arise in the application's API layer.",
      "class_diagram": "@startuml\n  class APIException implements Exception {\n    -dynamic message\n    +toString(): String\n  }\n  @enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the `APIException` class. Allows for the creation of a new `APIException` instance with an optional error message.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the `APIException` instance, including the runtime type and the error message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the Flutter `Color` class, adding utility methods for converting hexadecimal color strings to `Color` objects and integer values. This extension simplifies the process of working with color-related functionality in the application, improving developer productivity and maintainability.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to an integer value representing the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines a singleton class 'Flavors' that is responsible for managing the current application flavor, which is typically used to differentiate between development, staging, and production environments. The main purpose of this class is to provide a centralized way to access and check the current application flavor, enabling the application to behave differently based on the specific environment it is running in.",
      "class_diagram": "@startuml\nclass Flavors {\n  - static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, ensuring a singleton instance.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "Flavors.factory",
          "description": "Factory constructor for the Flavors class, returning the singleton instance.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "Getter that returns true if the current application flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Getter that returns true if the current application flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class is responsible for providing utility functions to handle JSON data in the application. It solves the problem of safely and consistently parsing and formatting JSON data, which is a common task in modern web and mobile applications.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  +static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  +static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  +static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic> by removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to an instance of type T, or returns null if the input is invalid.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON objects to a List<T> by applying the given fromJson function to each object.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the configuration options for the Firebase service in the development environment of the application. It defines the necessary credentials and settings to initialize and interact with the Firebase platform during the development phase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "flutter_dotenv"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "Centralized localization and internationalization (i18n) configuration export file that provides standardized access to app localization resources and supported language configurations",
      "class_diagram": "@startuml\npackage Localization {\n    [app_localizations.dart]\n    [localizations_extension.dart]\n    [supported_locales.dart]\n}\n@enduml",
      "methods": [
        {
          "name": "exportLocalizations",
          "description": "Exports core localization components for unified language support across the application",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It is responsible for setting up the overall application structure, including the navigation, localization, and event handling. This class serves as the foundation for the entire application, providing the core functionality and user experience.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application widget tree, including the MaterialApp, navigation, localization, and event handling.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/models/pet_actions.dart",
      "description": "This file defines the `PetAction` enum, which represents the various actions a user can perform on their pet in the application. It encapsulates the cost and description for each action, and provides a utility method to check if the user can afford a given action.",
      "class_diagram": "@startuml\nenum PetAction {\n    feed(cost: 10, description: 'Feed your pet')\n    play(cost: 5, description: 'Play with your pet')\n    clean(cost: 15, description: 'Clean your pet')\n    heal(cost: 30, description: 'Heal your pet')\n    sleep(cost: 0, description: 'Let your pet sleep')\n}\n\nPetAction {\n    + int cost\n    + String description\n    + bool canAfford(int coins)\n}\n@enduml",
      "methods": [
        {
          "name": "canAfford",
          "description": "Checks if the user has enough coins to perform the action",
          "parameters": [
            "coins"
          ],
          "return_type": "bool"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/ui/bottom_sheets/pet_shop/pet_shop_sheet_model.dart",
      "description": "This Dart file contains the `PetShopSheetModel` class, which is responsible for managing the state and functionality of the pet shop bottom sheet in the application. The main purpose of this class is to handle the logic for purchasing pet-related items, such as food, toys, or other accessories.",
      "class_diagram": "@startuml\nclass PetShopSheetModel {\n  - _petService: PetService\n  - _modelError: String\n  + modelError: String\n  + availableCoins: int\n  + canPurchase(PetAction action): bool\n  + purchaseItem(PetAction action): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "canPurchase",
          "description": "Checks if the user can afford to purchase the given `PetAction` based on their current number of coins.",
          "parameters": [
            "PetAction action"
          ],
          "return_type": "bool"
        },
        {
          "name": "purchaseItem",
          "description": "Attempts to purchase the given `PetAction` item by calling the `performAction` method on the `PetService`. If successful, the `_modelError` is set to `null`. If an error occurs, the `_modelError` is set to a descriptive error message.",
          "parameters": [
            "PetAction action"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked",
        "tamagochi_d/app/app.locator",
        "tamagochi_d/models/pet_actions",
        "tamagochi_d/services/pet_service"
      ]
    },
    {
      "name": "lib/ui/dialogs/pet_death_dialog/pet_death_dialog.dart",
      "description": "This file contains the implementation of the PetDeathDialog class, which is responsible for displaying a dialog to the user when their pet has died in the Tamagotchi-like application. The dialog provides the user with options to either start a new game with a new pet or dismiss the dialog.",
      "class_diagram": "@startuml\nclass PetDeathDialog extends StackedView<PetDeathDialogModel> {\n  - DialogRequest request\n  - Function(DialogResponse) completer\n  + builder(BuildContext, PetDeathDialogModel, Widget?)\n  + viewModelBuilder(BuildContext): PetDeathDialogModel\n}\n\nclass PetDeathDialogModel {\n  + modelError: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the PetDeathDialog, including the dialog title, description, and action buttons.",
          "parameters": [
            "BuildContext context",
            "PetDeathDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates a new instance of the PetDeathDialogModel, which is used to manage the state and functionality of the dialog.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "PetDeathDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:tamagochi_d/ui/common/ui_helpers.dart",
        "package:tamagochi_d/ui/dialogs/pet_death_dialog/pet_death_dialog_model.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/pet_death_dialog/pet_death_dialog_model.dart",
      "description": "This file contains the PetDeathDialogModel class, which is responsible for handling the logic and state related to the pet death dialog in the Tamagochi application. It provides the functionality to start a new pet when the user's previous pet has died.",
      "class_diagram": "@startuml\nclass PetDeathDialogModel {\n  - _petService: PetService\n  - _modelError: String?\n  + get modelError(): String?\n  + startNewPet(String name): Future<void>\n}\nPetDeathDialogModel --> PetService\n@enduml",
      "methods": [
        {
          "name": "startNewPet",
          "description": "Starts a new pet by creating a new pet using the PetService. If the creation is successful, the _modelError is set to null, otherwise it is set to an error message.",
          "parameters": [
            "String name"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked",
        "tamagochi_d/app/app.locator",
        "tamagochi_d/services/pet_service"
      ]
    },
    {
      "name": "lib/ui/views/pet_actions/pet_actions_viewmodel.dart",
      "description": "This file contains the PetActionsViewModel class, which is responsible for managing the state and behavior related to pet actions in the Tamagochi application. The main purpose of this class is to provide a centralized location for handling user interactions with pet actions, such as performing actions and managing the available coins.",
      "class_diagram": "@startuml\nclass PetActionsViewModel {\n  - _petService: PetService\n  - _modelError: String\n  + modelError: String\n  + availableCoins: int\n  + stream: Stream<PetState>\n  + canPerformAction(PetAction action): bool\n  + performAction(PetAction action): Future<void>\n  + clearError(): void\n}\n@enduml",
      "methods": [
        {
          "name": "canPerformAction",
          "description": "Checks if the user can perform the given pet action based on the available coins.",
          "parameters": [
            "PetAction action"
          ],
          "return_type": "bool"
        },
        {
          "name": "performAction",
          "description": "Performs the given pet action, updating the pet's state and the available coins.",
          "parameters": [
            "PetAction action"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "clearError",
          "description": "Clears any error messages that may have been set and notifies listeners of the change.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:tamagochi_d/app/app.locator.dart",
        "package:tamagochi_d/models/pet_actions.dart",
        "package:tamagochi_d/models/pet_state.dart",
        "package:tamagochi_d/services/pet_service.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet_statistics/pet_statistics_viewmodel.dart",
      "description": "The PetStatisticsViewModel is responsible for managing the state and UI logic related to displaying the statistics of a pet in a Tamagotchi-style application. It provides methods to retrieve and format the pet's last fed, cleaned, and played times, as well as the time elapsed since those events.",
      "class_diagram": "@startuml\n  class PetStatisticsViewModel {\n    + PetState? get pet\n    + String getLastFedTime()\n    + String getLastCleanedTime()\n    + String getLastPlayedTime()\n    + Duration getTimeSinceLastFed()\n    + Duration getTimeSinceLastCleaned()\n    + Duration getTimeSinceLastPlayed()\n  }\n  @enduml",
      "methods": [
        {
          "name": "getLastFedTime",
          "description": "Retrieves the last time the pet was fed and formats it as a string",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "getLastCleanedTime",
          "description": "Retrieves the last time the pet was cleaned and formats it as a string",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "getLastPlayedTime",
          "description": "Retrieves the last time the pet was played with and formats it as a string",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "getTimeSinceLastFed",
          "description": "Calculates the time elapsed since the pet was last fed",
          "parameters": null,
          "return_type": "Duration"
        },
        {
          "name": "getTimeSinceLastCleaned",
          "description": "Calculates the time elapsed since the pet was last cleaned",
          "parameters": null,
          "return_type": "Duration"
        },
        {
          "name": "getTimeSinceLastPlayed",
          "description": "Calculates the time elapsed since the pet was last played with",
          "parameters": null,
          "return_type": "Duration"
        }
      ],
      "dependencies": [
        "intl/intl.dart",
        "stacked/stacked.dart",
        "tamagochi_d/app/app.locator.dart",
        "tamagochi_d/models/pet_state.dart",
        "tamagochi_d/services/pet_service.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet_statistics/pet_statistics_view.dart",
      "description": "The `PetStatisticsView` class is responsible for displaying the statistics and key information about the user's pet in the Tamagotchi-style application. It provides a visual overview of the pet's status, including when the pet was last fed, cleaned, and played with, as well as the total coins earned by the pet.",
      "class_diagram": "@startuml\nclass PetStatisticsView {\n  -BuildContext context\n  -PetStatisticsViewModel viewModel\n  +builder(context, viewModel, child): Widget\n  +_buildStatCard(title, value, icon): Widget\n  +viewModelBuilder(context): PetStatisticsViewModel\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the `PetStatisticsView` based on the current state of the `PetStatisticsViewModel`.",
          "parameters": [
            "BuildContext context",
            "PetStatisticsViewModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildStatCard",
          "description": "Builds a single statistic card with the given title, value, and icon.",
          "parameters": [
            "String title",
            "String value",
            "IconData icon"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `PetStatisticsViewModel` to be used by the `PetStatisticsView`.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "PetStatisticsViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "tamagochi_d/ui/common/ui_helpers.dart",
        "tamagochi_d/ui/views/pet_statistics/pet_statistics_viewmodel.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet_actions/pet_actions_view.dart",
      "description": "The PetActionsView class is responsible for displaying a screen that allows the user to perform various actions on their pet. It is part of the Tamagochi_d application, which is a virtual pet management app.",
      "class_diagram": "@startuml\nclass PetActionsView {\n  +builder(BuildContext context, PetActionsViewModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): PetActionsViewModel\n}\n\nclass PetActionsViewModel {\n  +modelError: String?\n  +availableCoins: int\n  +performAction(PetAction action)\n  +canPerformAction(PetAction action): bool\n}\n\nclass PetActionButton {\n  +action: PetAction\n  +onPressed()\n  +isEnabled: bool\n}\n\nPetActionsView --> PetActionsViewModel\nPetActionsView --> PetActionButton\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the PetActionsView, including displaying the available coins, a list of pet actions, and any error messages.",
          "parameters": [
            "BuildContext context",
            "PetActionsViewModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the PetActionsViewModel, which provides the data and functionality for the PetActionsView.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "PetActionsViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:tamagochi_d/models/pet_actions.dart",
        "package:tamagochi_d/ui/common/ui_helpers.dart",
        "package:tamagochi_d/ui/views/pet_actions/pet_actions_viewmodel.dart",
        "package:tamagochi_d/ui/widgets/pet_action_button/pet_action_button.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/pet_action_button/pet_action_button.dart",
      "description": "This Dart file defines a custom Flutter widget called `PetActionButton` that represents a button for performing various actions on a virtual pet (tamagochi) in the application. The button displays the action, its cost in coins, and an associated icon. The button can be enabled or disabled based on the application state.",
      "class_diagram": "@startuml\nclass PetActionButton {\n  +PetAction action\n  +VoidCallback onPressed\n  +bool isEnabled\n  +build(BuildContext): Widget\n  -_getActionColor(): Color\n  -_getActionIcon(): Icon\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `PetActionButton` widget, including the button's appearance and layout.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_getActionColor",
          "description": "Returns the appropriate color for the button based on the type of pet action.",
          "parameters": null,
          "return_type": "Color"
        },
        {
          "name": "_getActionIcon",
          "description": "Returns the appropriate icon for the button based on the type of pet action.",
          "parameters": null,
          "return_type": "Icon"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "tamagochi_d/models/pet_actions.dart",
        "tamagochi_d/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/pet_avatar/pet_avatar.dart",
      "description": "The `PetAvatar` widget is responsible for rendering a visual representation of a pet's current mood in a Tamagotchi-style game. It provides a circular container with an appropriate background color and an emoji icon that changes based on the pet's mood.",
      "class_diagram": "@startuml\nclass PetAvatar {\n  -PetMood mood\n  -double size\n  +build(context): Widget\n  -_getBackgroundColor(): Color\n  -_getPetEmoji(): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the PetAvatar, including the circular container, background color, and emoji icon.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_getBackgroundColor",
          "description": "Determines the appropriate background color for the PetAvatar based on the pet's current mood.",
          "parameters": null,
          "return_type": "Color"
        },
        {
          "name": "_getPetEmoji",
          "description": "Selects the appropriate emoji icon to display based on the pet's current mood.",
          "parameters": null,
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:tamagochi_d/models/pet_state.dart",
        "package:tamagochi_d/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/pet_mood_indicator/pet_mood_indicator.dart",
      "description": "The `PetMoodIndicator` widget is responsible for displaying the current mood of a pet in the application. It provides a visual representation of the pet's emotional state, which is crucial for the user's understanding of the pet's well-being and needs.",
      "class_diagram": "@startuml\nclass PetMoodIndicator {\n  -PetMood mood\n  +Widget build(BuildContext context)\n  -Color _getMoodColor()\n  -Icon _getMoodIcon()\n  -String _getMoodText()\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the `PetMoodIndicator`, displaying the appropriate mood icon, color, and text based on the provided `PetMood`.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_getMoodColor",
          "description": "Determines the appropriate color for the mood indicator based on the `PetMood` value.",
          "parameters": null,
          "return_type": "Color"
        },
        {
          "name": "_getMoodIcon",
          "description": "Determines the appropriate icon for the mood indicator based on the `PetMood` value.",
          "parameters": null,
          "return_type": "Icon"
        },
        {
          "name": "_getMoodText",
          "description": "Determines the appropriate text for the mood indicator based on the `PetMood` value.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:tamagochi_d/models/pet_state.dart",
        "package:tamagochi_d/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/pet_stats_bar/pet_stats_bar.dart",
      "description": "This file contains the implementation of the `PetStatsBar` widget, which is responsible for displaying a progress bar with a label and a customizable color. It is a reusable UI component that is used to visualize the status or health of a pet in a Tamagotchi-style application.",
      "class_diagram": "@startuml\nclass PetStatsBar {\n  -String label\n  -int value\n  -Color? color\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `PetStatsBar` widget, which consists of a label and a linear progress indicator.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "tamagochi_d/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/repository/pet_repository.dart",
      "description": "The PetRepository class is responsible for managing the persistent storage and retrieval of a user's pet data. It provides a simple API for saving, loading, and deleting the current pet state, abstracting away the underlying data storage implementation.",
      "class_diagram": "@startuml\nclass PetRepository {\n  - _currentPet: PetState\n  + savePet(pet: PetState): Future<void>\n  + loadPet(): Future<PetState?>\n  + deletePet(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "savePet",
          "description": "Saves the current pet state to persistent storage.",
          "parameters": [
            "pet: PetState"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "loadPet",
          "description": "Retrieves the current pet state from persistent storage.",
          "parameters": null,
          "return_type": "Future<PetState?>"
        },
        {
          "name": "deletePet",
          "description": "Removes the current pet state from persistent storage.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:tamagochi_d/models/pet_state.dart"
      ]
    },
    {
      "name": "lib/models/pet_state.dart",
      "description": "Defines the state management model for a virtual pet in a Tamagochi-style application, capturing comprehensive pet attributes and lifecycle management",
      "class_diagram": "@startuml\nclass PetState {\n  +String name\n  +PetStats stats\n  +PetMood mood\n  +DateTime lastFed\n  +DateTime lastCleaned\n  +DateTime lastPlayed\n  +bool isSleeping\n  +int coins\n  +PetState initial(String name)\n  +PetState copyWith(...)\n}\n@enduml",
      "methods": [
        {
          "name": "PetState.initial",
          "description": "Creates the initial state for a new pet with default starting values",
          "parameters": [
            "name"
          ],
          "return_type": "PetState"
        },
        {
          "name": "copyWith",
          "description": "Creates a new PetState instance with selectively updated properties",
          "parameters": [
            "name",
            "stats",
            "mood",
            "lastFed",
            "lastCleaned",
            "lastPlayed",
            "isSleeping",
            "coins"
          ],
          "return_type": "PetState"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart",
        "package:tamagochi_d/models/pet_stats.dart"
      ]
    },
    {
      "name": "lib/models/pet_stats.dart",
      "description": "The `PetStats` class represents the key metrics and overall condition of a pet in a game or application. It encapsulates the pet's hunger, happiness, health, energy, and hygiene levels, and provides functionality to manage and update these attributes.",
      "class_diagram": "@startuml\nclass PetStats {\n  -int hunger\n  -int happiness\n  -int health\n  -int energy\n  -int hygiene\n  +PetStats.initial()\n  +PetStats copyWith({...})\n  +bool get isDead\n}\n@enduml",
      "methods": [
        {
          "name": "PetStats.initial()",
          "description": "Factory constructor that creates an initial `PetStats` instance with default values for all attributes.",
          "parameters": null,
          "return_type": "PetStats"
        },
        {
          "name": "copyWith",
          "description": "Creates a new `PetStats` instance with updated values for one or more attributes.",
          "parameters": [
            "int? hunger",
            "int? happiness",
            "int? health",
            "int? energy",
            "int? hygiene"
          ],
          "return_type": "PetStats"
        },
        {
          "name": "isDead",
          "description": "A getter that returns `true` if any of the pet's attribute levels have dropped to 0 or below, indicating the pet has died.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/services/pet_service.dart",
      "description": "A service responsible for managing the lifecycle, state, and interactions of a virtual pet in a Tamagochi-like application. It handles pet creation, action performance, stat tracking, mood calculation, and periodic decay of pet attributes.",
      "class_diagram": "@startuml\nclass PetService {\n  -PetRepository _repository\n  -PetState _currentPet\n  +Future<void> init()\n  +Future<void> createPet(String name)\n  +Future<void> performAction(PetAction action)\n  -PetStats _calculateNewStats(PetAction action)\n  -PetMood _calculateMood(PetStats stats)\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the pet service by loading an existing pet from repository and starting decay timer",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "createPet",
          "description": "Creates a new pet with the given name, saves it to repository, and starts tracking its state",
          "parameters": [
            "name"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "performAction",
          "description": "Executes a specific action on the pet, updating its stats, coins, and mood based on the action",
          "parameters": [
            "action"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "stacked/stacked_annotations.dart",
        "tamagochi_d/models/pet_actions.dart",
        "tamagochi_d/models/pet_state.dart",
        "tamagochi_d/models/pet_stats.dart",
        "tamagochi_d/repository/pet_repository.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/pet_shop/pet_shop_sheet.dart",
      "description": "The `PetShopSheet` class is responsible for displaying a bottom sheet UI component that allows users to interact with a virtual pet shop. This component provides the core functionality for purchasing various actions and items for the user's pet, and it serves as the primary interface for managing the pet's state and capabilities.",
      "class_diagram": "```\n@startuml\nclass PetShopSheet {\n  +Function(SheetResponse)? completer\n  +SheetRequest request\n  +builder(BuildContext, PetShopSheetModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): PetShopSheetModel\n}\n\nclass PetShopSheetModel {\n  +availableCoins: int\n  +modelError: String?\n  +canPurchase(PetAction): bool\n  +purchaseItem(PetAction): void\n}\n\nclass _ShopItem {\n  +action: PetAction\n  +onTap: VoidCallback\n  +isEnabled: bool\n  +builder(BuildContext): Widget\n}\n@enduml\n```",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the PetShopSheet, including the list of available actions, the current coin balance, and the close button.",
          "parameters": [
            "BuildContext",
            "PetShopSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Initializes the PetShopSheetModel, which manages the state and logic for the pet shop functionality.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PetShopSheetModel"
        },
        {
          "name": "canPurchase",
          "description": "Determines whether the user can purchase a given PetAction based on their available coins.",
          "parameters": [
            "PetAction"
          ],
          "return_type": "bool"
        },
        {
          "name": "purchaseItem",
          "description": "Handles the logic for purchasing a PetAction, updating the user's coin balance and triggering any necessary updates to the pet's state.",
          "parameters": [
            "PetAction"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:tamagochi_d/models/pet_actions.dart",
        "package:tamagochi_d/ui/bottom_sheets/pet_shop/pet_shop_sheet_model.dart",
        "package:tamagochi_d/ui/common/app_colors.dart",
        "package:tamagochi_d/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet_status/pet_status_viewmodel.dart",
      "description": "This Dart file contains the PetStatusViewModel class, which is responsible for managing the state and functionality related to a user's pet in a Tamagotchi-style mobile application.",
      "class_diagram": "@startuml\nclass PetStatusViewModel extends StreamViewModel<PetState> {\n  - _petService: PetService\n  - _modelError: String\n  + modelError: String\n  + currentPet: PetState\n  + stream: Stream<PetState>\n  + createNewPet(String name): Future<void>\n  + clearError(): void\n}\n@enduml",
      "methods": [
        {
          "name": "createNewPet",
          "description": "Creates a new pet with the given name in the application's pet service.",
          "parameters": [
            "String name"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "clearError",
          "description": "Clears the model error and notifies listeners of the updated state.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:stacked/stacked.dart",
        "package:tamagochi_d/app/app.locator.dart",
        "package:tamagochi_d/models/pet_state.dart",
        "package:tamagochi_d/services/pet_service.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet_status/pet_status_view.dart",
      "description": "Auto-generated entry for lib/ui/views/pet_status/pet_status_view.dart (analysis failed)",
      "class_diagram": "@startuml\nclass Auto\n@enduml",
      "methods": [],
      "dependencies": []
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant PetStatusView\nparticipant PetStatusViewModel\nparticipant PetActionsView\nparticipant PetActionsViewModel\nparticipant PetShopSheet\nparticipant PetShopSheetModel\nparticipant PetDeathDialog\nparticipant PetDeathDialogModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> PetStatusView: Navigate on completion\nPetStatusView -> PetStatusViewModel: Initialize\nUser -> PetStatusView: Create new pet\nPetStatusViewModel -> PetService: Create new pet\nPetService -> PetRepository: Save new pet\nUser -> PetActionsView: Perform pet actions\nPetActionsView -> PetActionsViewModel: Handle user actions\nPetActionsViewModel -> PetService: Perform pet actions\nPetService -> PetRepository: Update pet state\nUser -> PetShopSheet: Open pet shop\nPetShopSheet -> PetShopSheetModel: Initialize\nPetShopSheetModel -> PetService: Retrieve pet stats and coins\nUser -> PetShopSheet: Purchase pet items\nPetShopSheetModel -> PetService: Update pet state and coins\nPetService -> PetRepository: Save updated pet state\nPetService -> PetStatusView: Notify pet state changes\nUser -> PetStatusView: Monitor pet status\nPetStatusViewModel -> PetService: Retrieve pet state\nPetService -> PetRepository: Load pet state\nPetService -> PetStatusView: Notify pet state changes\nUser -> PetStatusView: Observe pet deterioration\nPetStatusViewModel -> PetService: Monitor pet state\nPetService -> PetStatusView: Notify pet death\nPetStatusView -> PetDeathDialog: Display pet death dialog\nPetDeathDialog -> PetDeathDialogModel: Initialize\nUser -> PetDeathDialog: Start new game\nPetDeathDialogModel -> PetService: Create new pet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view has a corresponding ViewModel that manages the state and business logic for that view. The ViewModels interact with various services, such as the PetService and AnalyticService, to handle the application's core functionality.\n\nThe PetStatusViewModel and PetActionsViewModel manage the state related to the pet, including the pet's stats, mood, and actions. The PetShopSheetModel manages the state and logic for the pet shop, such as the user's available coins and the ability to purchase pet items.\n\nThe state is propagated from the ViewModels to the corresponding Views, which then update the UI to reflect the current state. User interactions in the Views trigger updates in the ViewModels, which in turn update the state and propagate those changes back to the UI.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in app.router.dart. The main entry point is the AppView, which initializes the Stacked architecture and displays the StartupView.\n\nAfter the startup logic is completed, the StartupViewModel navigates to the PetStatusView, which is the main hub for the user's pet management. From the PetStatusView, the user can navigate to the following screens:\n\n- PetActionsView: Allows the user to perform actions on the pet, such as feeding, cleaning, and playing.\n- PetShopSheet: Displays a bottom sheet that allows the user to purchase items for the pet using in-game coins.\n\nIf the pet dies, the PetStatusViewModel triggers the display of the PetDeathDialog, which gives the user the option to start a new game with a new pet.\n\nThe application also integrates with the Stacked Services for handling dialogs and bottom sheets, allowing for the display of custom UI components, such as the InfoAlertDialog and NoticeSheet, throughout the user's interactions."
}